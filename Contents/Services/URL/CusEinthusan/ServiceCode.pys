#!/usr/bin/env python

"""Einthusan.com ServiceCode"""

BASE_URL = 'https://einthusan.ca'
USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0'
HTTP.Headers['User-Agent'] = USER_AGENT
HTTP.Headers['Referer'] = BASE_URL

####################################################################################################
def NormalizeURL(url, **kwargs):

	return url
####################################################################################################
def MetadataObjectForURL(url, **kwargs):

	data = get_data(url)
	
	furl = data['url']
	title = data['title']
	year = int(data['year'])
	summary = data['summary']
	thumb = data['thumb']
	rating = float(data['rating'])
	
	# setup thumb with fallback
	fallback = 'http://i.imgur.com/75YO83o.jpg'
		
	return MovieObject(
		title = title,
		url = furl,
		rating = rating,
		summary = summary,
		art = thumb,
		year = year,
		thumb = Resource.ContentsOfURLWithFallback(url = thumb, fallback=fallback)
	)
	
####################################################################################################
def MediaObjectsForURL(url, **kwargs):
	
	data = get_data(url)
	furl = data['url']
	
	if '.flv' in furl:
		return [
			MediaObject(
				container = Container.FLV,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url=furl))]
			)
		]
	elif '.m3u8' in furl:
		return [
			MediaObject(
				protocol = 'hls',
                container = 'mpegts',
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url=furl))]
			)
		]
	else:
		return [
			MediaObject(
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url=furl))]
			)
		]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
	http_headers = {'User-Agent': USER_AGENT, 'Referer': BASE_URL}
	if '.m3u8' in url:
		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url), http_headers=http_headers)
	else:
		return IndirectResponse(VideoClipObject, key=url, http_headers=http_headers)


####################################################################################################
def get_data(url, **kwargs):
	return JSON.ObjectFromString(D(url.split('einthusan://')[1]))
